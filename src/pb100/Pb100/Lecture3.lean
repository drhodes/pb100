-- Lecture3.lean, part 1
import Mathlib
-- import Mathlib.Algebra.ModEq
-- import Mathlib.Data.Set.Basic
-- import Mathlib.Logic.Basic
-- import Mathlib.Order.Bounds.Basic
-- import Mathlib.Order.Notation


namespace Lecture3

set_option autoImplicit true

def inj (A: Set Œ±) (B: Set Œ≤) (f: Œ±‚ÜíŒ≤) := ‚àÄx ‚àà A, ‚àÄy ‚àà A, (f x ‚àà B) ‚àß (f y ‚àà B) ‚àß f x = f y ‚Üí x = y
def sur (A: Set Œ±) (B: Set Œ≤) (f: Œ±‚ÜíŒ≤) := ‚àÄy ‚àà B, ‚àÉx ‚àà A, f x ‚àà B ‚àß f x = y
def bij (A: Set Œ±) (B: Set Œ≤) (f: Œ±‚ÜíŒ≤) := inj A B f ‚àß sur A B f

def card_eq (A: Set Œ±) (B: Set Œ≤) := ‚àÉ f, bij A B f
def card_le (A: Set Œ±) (B: Set Œ≤) := ‚àÉ f, inj A B f
def card_lt (A: Set Œ±) (B: Set Œ≤) := ‚àÉ f, inj A B f ‚àß ¬¨ card_eq A B

open Set

section cantor‚ÇÅ

theorem cantor (A: Set Œ±) : card_lt A (powerset A) := by
  use (Œª x => {x}) -- choose some f where f(x) = {x}
  constructor
  ¬∑ -- inj A (ùí´ A) fun x ‚Ü¶ {x}
    intro x hx y hy h
    obtain ‚ü®_, _, h‚ÇÅ‚ü© := h
    dsimp at *
    rw [‚Üêsingleton_eq_singleton_iff]
    exact h‚ÇÅ
  ¬∑ -- |A| ‚â† |ùí´ A|
    by_contra h
    dsimp [card_eq] at h
    obtain ‚ü®g, hg‚ü© := h

    let B := {x ‚àà A | x ‚àâ g x}
    have hb : B ‚àà ùí´ A := @mem_of_mem_diff Œ± A (Œª x => g x x)

    obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := hg
    rw [sur] at h‚ÇÇ

    have hg : ‚àÉ b ‚àà A, g b = B := by
      obtain ‚ü®x, ‚ü®hx‚ÇÅ, _, hx‚ÇÇ‚ü©‚ü© := h‚ÇÇ B hb
      use x

    obtain ‚ü®b, ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©‚ü© := hg

    cases (Classical.em (b ‚àà g b)) with
    | inl h =>
      ¬∑ have hc := h
        dsimp [B] at hb‚ÇÇ
        rw [hb‚ÇÇ] at h
        obtain ‚ü®_, hc‚ÇÇ‚ü© := h
        contradiction
    | inr h =>
      ¬∑ have hc := h
        dsimp [B] at hb‚ÇÇ
        rw [hb‚ÇÇ] at h
        simp at h
        have := h hb‚ÇÅ
        contradiction

end cantor‚ÇÅ

/-!

Goal : To describe ‚Ñù

Theorem: There exists a unique ordered field containing ‚Ñö with the least upper
bound property that is denoted by ‚Ñù


-/

-- defining ordered sets and fields.

namespace ex‚ÇÇ

-- can an ordering be created
-- (P ‚àß ¬¨Q ‚àß ¬¨R) ‚à® (¬¨P ‚àß Q ‚àß ¬¨R) ‚à® (¬¨P ‚àß ¬¨Q ‚àß R)


local infix:50 "‚â∫"  => Œª (A B : Set ‚Ñï) => (A ‚äÜ B)

lemma ord_refl : Reflexive (¬∑ ‚â∫ ¬∑) := by
  dsimp [Reflexive]
  intro x
  norm_num

lemma ord_not_symm : ¬¨ Symmetric (¬∑ ‚â∫ ¬∑) := by
  dsimp [Symmetric]
  push_neg
  use {1}, {1,2}
  constructor
  ¬∑ norm_num
  ¬∑ norm_num

lemma ord_antisymm : AntiSymmetric (¬∑ ‚â∫ ¬∑) := by
  dsimp [AntiSymmetric]
  intro x y h‚ÇÅ h‚ÇÇ
  dsimp [Set.subset_def] at *
  ext w
  constructor
  ¬∑ apply h‚ÇÅ w
  ¬∑ apply h‚ÇÇ w

lemma ord_trans : Transitive (¬∑ ‚â∫ ¬∑) := by
  dsimp [Transitive]
  intro x y z hx hy
  trans y
  apply hx
  apply hy


--def PartialOrder := Reflexive (¬∑ ‚â∫ ¬∑) ‚àß AntiSymmetric (¬∑ ‚â∫ ¬∑) ‚àß Transitive (¬∑ ‚â∫ ¬∑)

def PartialOrder (Œ±: Set ‚Ñï ‚Üí Set ‚Ñï ‚Üí Prop) := Reflexive Œ± ‚àß AntiSymmetric Œ± ‚àß Transitive Œ±

-- Ok, it's a partial order
example : PartialOrder (¬∑ ‚â∫ ¬∑) := by
  unfold PartialOrder
  refine ‚ü®ord_refl, ord_antisymm, ord_trans‚ü©


def StrictOrder' (Œ±: Set ‚Ñï ‚Üí Set ‚Ñï ‚Üí Prop) := Irreflexive Œ± ‚àß AntiSymmetric Œ± ‚àß Transitive Œ±

-- #check StrictOrdered.eq_of_rel

-- (h_symm : @Symmetric Œ± r) (h_trans : @Transitive Œ± r)



example : ¬¨ StrictOrder' (¬∑ ‚â∫ ¬∑) := by
  unfold StrictOrder'
  push_neg
  intro h‚ÇÅ _ _
  have : ¬¨ Irreflexive (¬∑ ‚â∫ ¬∑) := by
    unfold Irreflexive
    push_neg
    use {1}
  contradiction

end ex‚ÇÇ

-- example ‚Ñ§ is StrictOrdered with relation m > n ‚Üî m - n ‚àà ‚Ñï
-- example ‚Ñö is StrictOrdered with relation p > q ‚Üî ‚àÉm,n ‚àà ‚Ñï, p - q = m/n - n ‚àà ‚Ñï
-- example ‚Ñö√ó‚Ñö is StrictOrdered with relation (q,r) > (s,t) ‚Üî q>s ‚à® q=s ‚àß r>t


-- Definition 11 (Bounded Above/Below)

-- Let S be an ordered set and let E ‚äÇ S. Then,

-- 1. If there exists a b ‚àà S such that x ‚â§ b for all x ‚àà E, then E is bounded
--    above and b is an least upper bound of E.

-- 2. If ‚àÉc ‚àà S such that x ‚â• c for all x ‚àà E, then E is bounded below and c is
--    a lower bound of E.


def StrictOrder {r: Type} (Œ±: r ‚Üí r ‚Üí Prop) :=
  Irreflexive Œ± ‚àß AntiSymmetric Œ± ‚àß Transitive Œ±



namespace bounded
-- variable (f: Œ± ‚Üí Œ± ‚Üí Prop)
-- local infix:50 "‚â∫"  => Œª (A B) => f A B

-- Definition 11 (Bounded Above / Below)

namespace example12_term


def E : Set ‚Ñ§ := {-2, -1, 0, 1, 2}

-- thanks to Jireh Loreaux for providing this proof
example: BddAbove E := ‚ü®2, by aesop (add simp [E])‚ü©

end example12_term

namespace example12

def E : Set ‚Ñ§ := {-2, -1, 0, 1, 2}

example: BddAbove E := by
  use 3
  intro x h
  aesop (add simp [E]) -- todo explain how this is working.

example : IsLUB E 2 := by
  constructor
  ¬∑ unfold upperBounds
    dsimp
    intro a
    aesop (add simp [E])
  ¬∑ --
    dsimp [upperBounds, lowerBounds]
    intro a h
    have h‚ÇÅ := @h 2
    apply h‚ÇÅ
    dsimp [E]
    simp

def S‚ÇÅ := {n:‚Ñï | n < 3}

example : IsLUB S‚ÇÅ 2 := by
  constructor
  ¬∑ --
    dsimp [upperBounds, S‚ÇÅ]
    intro a h
    linarith
  ¬∑ --
    dsimp [lowerBounds, upperBounds, S‚ÇÅ]
    intro a h
    apply (@h 2)
    norm_num

-- OK!
lemma rat_refl : ‚àÄx:‚Ñö, x ‚â§ x := by simp

lemma rat_antisymm'  (x y : ‚Ñö) : ( x ‚â§ y ) ‚àß ( y ‚â§ x ) ‚Üí x = y := by
  contrapose
  push_neg
  intro h‚ÇÅ h‚ÇÇ
  rw [le_iff_lt_or_eq] at h‚ÇÇ
  cases h‚ÇÇ with
  | inl h => exact h
  | inr h => contradiction

lemma rat_trans  (x y z: ‚Ñö) : ( x ‚â§ y ) ‚àß ( y ‚â§ z ) ‚Üí x ‚â§ z := by
  intro h
  obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := h
  trans y
  exact h‚ÇÅ
  exact h‚ÇÇ

def ub (s: Set Œ±) [LE Œ±] := { b : Œ± | ‚àÄ a ‚àà s, a ‚â§ b }

-- An element l of S is the supremum or least upper bound (l.u.b.)
-- sup E for E if:
-- (a) l is an upper bound for E;
-- (b) If b is an upper bound for E, then l ‚â§ b
def Sup (s: Set Œ±) (l: Œ±) [LE Œ±] := l ‚àà (ub s) ‚àß ‚àÄ b ‚àà s, b ‚àà (ub s) ‚Üí l ‚â§ b

-- Hi all, I'm having trouble showing the 3 is the least upper bound of the
-- following set S:

def S := {q : ‚Ñö | q < 3 }

-- I should say that I'm using the mathlib definition to try to prove it like this:

example: IsLUB S 3 := by sorry

-- And I'm sorry'ing out, because I could not prove that. I started unpacking
-- the definition to try to narrow down where the problem is.

-- sanity check, is 3 in the upperBounds?
lemma three_in_ub : 3 ‚àà upperBounds S := by
  dsimp [upperBounds, S]
  intro x h
  linarith -- ok.

-- is everything greater than or equal to 3 in the upperbounds?
lemma ge_three_in_ub (r : ‚Ñö) (h: 3 ‚â§ r): r ‚àà upperBounds S := by
  dsimp [upperBounds, S]
  intro x h
  linarith -- ok.

-- Here are the innards of: IsLUB S 3
example: IsLeast (upperBounds S) 3 := by
  constructor
  ¬∑ -- 3 ‚àà upperBounds S
    apply three_in_ub
  ¬∑ -- 3 ‚àà lowerBounds (upperBounds S)
    sorry
    -- trying to prove this below: three_in_lb_of_ub.

lemma three_in_lb_of_ub : 3 ‚àà lowerBounds (upperBounds S) := by
  dsimp [lowerBounds]
  intro a h
  dsimp [upperBounds] at h
  have h‚ÇÅ := @h 3
  have h‚ÇÇ : 3 ‚àâ S := by dsimp [S]; linarith
  apply h‚ÇÅ
  sorry -- stuck.

-- I could really use a hand proving the lemma `three_in_lb_of_ub`, or in case
-- I'm simply just wrong, I would appreciate that. If I should not be using
-- IsLUB for this, then that would also be helpful to know.

--example : T = upperBounds S := by

/- Luigi's "brute force solution" -/
-- https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20Least.20Upper.20Bound.2C.20IsLUB.20and.20the.20stubborn.20set.2E

example: IsLUB S 3 := by
  refine isLUB_iff_le_iff.mpr ?_
  intro b
  constructor
  ¬∑ intro hb
    simp [upperBounds, S]; intros; linarith
  ¬∑ contrapose!
    intro hb
    simp [upperBounds, S]
    refine ‚ü®b + (3-b)/2, by linarith, by simp [hb]‚ü©

example: IsLUB S 3 := by
  rw [isLUB_iff_le_iff]
  intro b
  constructor
  ¬∑ intro hb
    simp [upperBounds, S];
    intro a h‚ÇÅ
    linarith
  ¬∑ contrapose!
    intro hb
    dsimp [upperBounds, S]
    push_neg
    use b + (3-b)/2
    constructor
    ¬∑ linarith
    ¬∑ linarith


end example12

--
end bounded



namespace example12‚ÇÉ

def S := {q:‚Ñö | 0 ‚â§ q ‚àß q < 1}

example : IsGLB S 0 := by
  constructor
  ¬∑ simp [lowerBounds, S]
    intros; linarith
  ¬∑ intro x h
    simp [lowerBounds, S] at h
    apply (@h 0)
    repeat norm_num

example : IsLUB S 1 := by
  rw [isLUB_iff_le_iff]
  intro x
  constructor
  ¬∑ intro h
    simp [upperBounds, S]
    intros
    linarith
  ¬∑ --
    contrapose!
    intro h‚ÇÅ
    dsimp [upperBounds, S]
    push_neg
    cases lt_or_le x (-1)
    ¬∑ -- case: x < -1
      use 1/2
      refine ‚ü®by norm_num, by linarith‚ü©
    ¬∑ -- case: -1 ‚â§ x
      use (x+1)/2
      refine ‚ü®‚ü®by linarith, by linarith‚ü©, by linarith‚ü©

end example12‚ÇÉ


-- Keep this theorem + proof.
namespace theorem_14

def E := {q : ‚Ñö | 0 < q ‚àß q^2 < 2}

-- the notes have: 0 ‚â§ x, but should be 1 ‚â§ x ?
-- https://youtu.be/nbENJ-Ce7Nc?t=3947

-- note about the lecture, Dr. Rodrigeuz later uses 1 < x instead of 1 ‚â§ x.??

lemma part‚ÇÅ (x : ‚Ñö) : IsLUB E x ‚Üí 1 ‚â§ x:= by
  -- since 1 ‚àà E
  have h‚ÇÅ : 1 ‚àà E := by dsimp [E]; aesop
  intro h‚ÇÇ
  obtain ‚ü®h‚ÇÉ, _‚ü© := h‚ÇÇ
  dsimp [upperBounds] at h‚ÇÉ
  apply h‚ÇÉ
  exact h‚ÇÅ


-- https://youtu.be/nbENJ-Ce7Nc?t=4053
lemma part‚ÇÇ (x : ‚Ñö) : IsLUB E x ‚Üí 2 ‚â§ x^2 := by
  by_contra hc
  push_neg at hc

  -- define h to break an inequality.
  set h := min (1 / 2) (2 - x^2) / (2 * (2*x + 1))
  have h‚ÇÅ : h < 1 := by sorry
  have h‚ÇÄ : 0 < h := by sorry
  have hx : 0 < x := by
    have hp := part‚ÇÅ x hc.left
    linarith

  -- since x^2 < 2
  obtain ‚ü®h‚ÇÇ, h‚ÇÉ‚ü© := hc

  have h‚ÇÑ : x + h ‚àà E := by
    -- x plus a positive number is bigger than x.
    have :=
    calc (x + h)^2
      _= x^2 + 2*x*h + h^2 := by ring
      _< x^2 + 2*x*h + h := by nlinarith
      _= x^2 + (2*x + 1) * 1 * h := by ring
      _< x^2 + (2*x + 1) * 2 * h := by
        have hr‚ÇÅ : 1 < (2:‚Ñö) := by norm_num
        rel [hr‚ÇÅ]

      _‚â§ x^2 + (2*x + 1) * (2 - x^2) / (2 * (2*x + 1)) := by sorry
      _= x^2 + ((2*x + 1) / (2*x + 1)) * ((2 - x^2) / 2) := by sorry
      _< x^2 + 2 - x^2 := by sorry
      _= 2 := by ring
    sorry

  -- x + h ‚àà E, however that's impossible because sup E < x + h.
  have h‚ÇÑ : x + h < x := by sorry -- show this.
  have : ¬¨ (0 < h) := by linarith
  contradiction


-- https://ocw.mit.edu/courses/18-100a-real-analysis-fall-2020/mit18_100af20_lec32.pdf#page=4
-- Prove that x^2 ‚â§ 2
lemma part‚ÇÉ (x : ‚Ñö) : IsLUB E x ‚Üí x^2 ‚â§ 2 := by
  intro h
  -- assert that 1 ‚â§ x
  have h‚ÇÅ := part‚ÇÅ x h

  set h := (x^2 - 2) / (2 * x)

  -- suppose 2 < x^2
  have : 2 < x^2 ‚Üí 0 < h ‚Üí 0 < x - h := by
    intro h2 h3
    have hs :=
      calc 2
        _< 2 + h^2 := by nlinarith
        _= x^2 - (x^2 - 2) + h^2 := by linarith
        _= x^2 - 2*x*h + h^2 := by sorry
        _= (x - h)^2 := by sorry
    sorry
  sorry

-- https://youtu.be/nbENJ-Ce7Nc?t=3839
-- if x = sup E then 1 ‚â§ x and x^2 = 2.
theorem thm_14 (x : ‚Ñö) : IsLUB E x ‚Üí 1 ‚â§ x ‚àß x^2 = 2 := by
  intro h
  constructor
  ¬∑ -- ‚ä¢ 1 ‚â§ x
    -- since 1 is in E, and x = sup E, then 1 ‚â§ x.
    apply part‚ÇÅ x h

  ¬∑ -- ‚ä¢ x ^ 2 = 2
    -- case split, prove equality by proving two inequalities.
    rw [le_antisymm_iff]

    constructor
    ¬∑ -- ‚ä¢ x^2 ‚â§ 2
      apply part‚ÇÉ x h
    ¬∑ -- ‚ä¢ 2 ‚â§ x^2
      apply part‚ÇÇ x h

-- https://youtu.be/mlPLLXHZ8_U?t=581

lemma two_is_ub : 2 ‚àà upperBounds E := by
  intro a h
  obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := h
  nlinarith





-- prove that the rational numbers do not have the least upper bound property
-- using ordering, originally by Dedekind.

-- from : https://youtu.be/mlPLLXHZ8_U?t=890
-- to   : https://youtu.be/mlPLLXHZ8_U?t=1579

example : ¬¨ ‚àÉ x : ‚Ñö, IsLUB E x := by
  by_contra h
  obtain ‚ü®x, hx‚ü© := h
  sorry



end theorem_14



namespace page24

def lowest_terms (q : ‚Ñö) := Int.gcd q.num q.den = 1

def S := {x : ‚Ñö | x^2 < 2}



example : ¬¨ ‚àÉ q:‚Ñö, IsLUB S q := by
  -- TODO
  push_neg
  intro q
  simp [IsLUB, IsLeast]
  intro h‚ÇÅ
  simp [upperBounds, lowerBounds, S] at *
  use (q + 1) / 2
  constructor
  ¬∑ --
    intro a h‚ÇÇ
    sorry
  ¬∑ sorry


lemma rat_eq_self_num (q : ‚Ñö) (hq : q.den = 1) : q = q.num := by
  apply Rat.ext
  ¬∑ rfl
  ¬∑ simp_all only [Rat.intCast_den]


end page24


namespace q_no_lubp

-- The least upperbound property holds for a set, if all non-empty subsets
-- have a least upperbound.

-- E is such a subset of the rationals, it does not have a least upperbound.

def E := {q : ‚Ñö | 0 < q ‚àß q^2 < 2}

lemma alg‚ÇÅ (x q : ‚Ñö) (h : x ‚â† 0):
  (x - (x ^ 2 - 2) / (2 * x) + q) = ((x ^ 2 + 2) / (2 * x) + q) := by
    have h‚ÇÅ : 2 * x ‚â† 0 := by aesop
    calc (x - (x ^ 2 - 2) / (2 * x) + q)
      _= (x + (2 - x ^ 2) / (2 * x) + q) := by ring
      _= (1 * x + (2 - x ^ 2) / (2 * x) + q) := by ring
      _= (((2 * x) / (2 * x)) * x + (2 - x ^ 2) / (2 * x) + q) := by
        rw [‚Üê div_self h‚ÇÅ]
      _= (((2 * x^2) / (2 * x)) + (2 - x ^ 2) / (2 * x) + q) := by ring
      _= ((2 * x^2 + 2 - x ^ 2) / (2 * x) + q) := by ring
      _= ((x ^ 2 + 2) / (2 * x) + q) := by ring

lemma rel‚ÇÅ (a b : ‚Ñö) {ha : 0 < a} {hab : 0 < a * b} : 0 < b := by
  exact (pos_iff_pos_of_mul_pos hab).mp ha

lemma lubp_part_1 (x : ‚Ñö) : IsLUB E x ‚Üí 1 ‚â§ x ‚àß x^2 = 2 := by
  --
  intro h‚Çâ
  have con‚ÇÅ := h‚Çâ
  dsimp [IsLUB, IsLeast, upperBounds, lowerBounds] at h‚Çâ
  obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := h‚Çâ
  constructor
  ¬∑ -- 1 ‚â§ x
    apply h‚ÇÅ
    unfold E; norm_num
  ¬∑ -- ‚ä¢ x ^ 2 = 2
    rw [le_antisymm_iff]
    constructor
    ¬∑ -- x^2 ‚â§ 2
      have h‚ÇÉ : ¬¨ 2 < x^2 := by
        by_contra h‚ÇÉ
        let H := (x ^ 2 - 2) / (2 * x)

        have H‚ÇÅ : 0 < H := by
          dsimp [H]
          have : 1 ‚â§ x := by
            apply h‚ÇÅ
            unfold E; norm_num
          rw [div_pos_iff_of_pos_right]
          linarith
          linarith
        have H‚ÇÇ : x - H < x := by linarith

        have H‚ÇÉ : upperBounds E (x - H) := by
          simp [upperBounds, E]
          intro q hq‚ÇÄ hq‚ÇÅ
          have hx : x ‚â† 0 := by aesop
          have hx‚ÇÇ : 2 * x ‚â† 0 := by aesop
          have hx‚ÇÉ : 0 < x := by aesop
          have h‚ÇÑ :=
            calc (x - H)^2
              _= x^2 - 2*x*H + H^2 := by ring
              _= x^2 - ((2*x) * (x ^ 2 - 2)) / (2 * x) + H^2 := by ring
              _= x^2 - ((x^2 - 2) * (2 * x)) / (2 * x) + H^2 := by ring
              _= x^2 - ((x^2 - 2) * ((2 * x) / (2 * x))) + H^2 := by ring
              _= x^2 - ((x^2 - 2) * (1)) + H^2 := by rw [div_self hx‚ÇÇ]
              _= x^2 - x^2 + 2 + H^2 := by ring
              _= 2 + H^2 := by ring
              _> 2 := by nlinarith

          have h‚ÇÜ :=
            calc 0
              _< (x-H)^2 - q^2 := by linarith
              _= (x - H + q) * (x - H - q) := by ring
              _= (x - (x ^ 2 - 2) / (2 * x) + q) * (x - H - q) := by ring
              _= ((x ^ 2 + 2) / (2 * x) + q) * (x - H - q) := by rw [alg‚ÇÅ x q hx]
          have : 0 < q := by aesop
          have h‚Çá : 0 < x - H - q := by
            have hp‚ÇÅ : 0 < (x ^ 2 + 2) / (2 * x) + q := by positivity
            let A := (x ^ 2 + 2) / (2 * x) + q
            let B := (x - H - q)
            apply @rel‚ÇÅ A B hp‚ÇÅ h‚ÇÜ
          linarith

        have : x ‚â§ x - H := by
          simp [upperBounds] at H‚ÇÉ
          apply h‚ÇÇ
          intro v hv
          apply H‚ÇÉ
          exact hv
        norm_num at *
        have : ¬¨ 0 < H := by linarith
        contradiction
      push_neg at h‚ÇÉ
      exact h‚ÇÉ


    ¬∑ --  2 ‚â§ x ^ 2 -- 1:07:07
      by_contra hc
      push_neg at hc
      have h‚ÇÉ : 1 ‚â§ x := by apply h‚ÇÅ; unfold E; norm_num
      let H := min ((2-x^2)/(2*(2*x + 1))) (1/2)
      have H‚ÇÅ : 0 < H := by
        dsimp [H]
        simp
        simp_all only [sub_pos, div_pos_iff_of_pos_left, Nat.ofNat_pos, mul_pos_iff_of_pos_left]
        linarith
      have H‚ÇÇ : H < 1 := by
        simp_all only [one_div, lt_min_iff, sub_pos, div_pos_iff_of_pos_left, Nat.ofNat_pos, mul_pos_iff_of_pos_left,
          inv_pos, and_true, min_lt_iff, H]
        right
        norm_num
      -- now prove that x + H ‚àà E
      let œÜ := 2 * x + 1
      have h' : œÜ ‚â† 0 := by aesop
      have H‚ÇÉ : H ‚â§ ((2 - x^2)/(2*œÜ)) := by aesop

      have hxe := -- show (x + H) ^ 2 < 2
        calc (x + H)^2
          _= x^2 + 2*x*H + H^2 := by ring
          _< x^2 + 2*x*H + H := by nlinarith
          _= x^2 + œÜ*H := by ring
          _‚â§ x^2 + œÜ * ((2 - x^2) / (2*(2*x + 1))) := by rel [H‚ÇÉ]
          _= x^2 + œÜ * (1/(2*œÜ)) * (2 - x^2) := by ring
          _= x^2 + (œÜ / (2*œÜ)) * (2 - x^2) := by ring
          _= x^2 + (œÜ / (œÜ*2)) * (2 - x^2) := by ring
          _= x^2 + (1 / 2) * (2 - x^2) := by rw [div_mul_right 2 h']
          _< x^2 + (1    ) * (2 - x^2) := by
            have h‚Çá : 0 < 2 - x ^ 2 := by nlinarith
            gcongr; norm_num
          _= 2 := by ring

      have hxe‚ÇÇ : (x + H)^2 < 2 ‚Üí x + H ‚àà E := by
        intro hh‚ÇÅ
        unfold E
        constructor
        ¬∑ positivity
        ¬∑ exact hh‚ÇÅ

      have hxe‚ÇÑ : x + H ‚àà E := by apply hxe‚ÇÇ; exact hxe

      have hxe‚ÇÜ : ¬¨ IsLUB E x := by
        have con‚ÇÇ := @h‚ÇÅ (x + H) hxe‚ÇÑ
        have : ¬¨ 0 < H := by linarith
        contradiction
      contradiction

/-
Suppose there exists an x ‚àà ‚Ñö, x = sup E.
Then by our previous theorem, x^2 = 2.
Note that 1 < x as otherwise x ‚â§ 1 ‚Üí 2 = x^2 < 1^2
Thus, ‚àÉ m, n ‚àà ‚Ñï such that n < m and x = m/n.
Therefore ‚àÉ n ‚àà ‚Ñï, n * x ‚àà ‚Ñï
Define S := {k ‚àà ‚Ñï | k*x ‚àà ‚Ñï}
Then S ‚â† ‚àÖ, since n ‚àà S.
By well ordering of ‚Ñï, S has least element k‚ÇÄ.
Let k‚ÇÅ = k‚ÇÄ*x - k‚ÇÄ ‚àà ‚Ñ§
Then k‚ÇÅ = k‚ÇÄ * (x - 1) < k‚ÇÄ * (2 - 1) = k‚ÇÄ.
So, k‚ÇÅ ‚àà ‚Ñï and k‚ÇÅ < k‚ÇÄ ‚Üí k‚ÇÅ ‚àâ S because k‚ÇÄ is the least element of S.
But, x*k‚ÇÅ = k‚ÇÄ*x^2 - x*k‚ÇÄ = 2*k‚ÇÄ - x*k‚ÇÄ = k‚ÇÄ-k‚ÇÅ ‚àà ‚Ñï ‚Üí k‚ÇÅ ‚àà S
This is a contradiction. Thus, ‚àÑx ‚àà ‚Ñö such that x = sup E.
-/

lemma rat_den_one_is_int (q: ‚Ñö) (h : q.den = 1) : ‚àÉ n : ‚Ñ§, n = q := by
  exact CanLift.prf q h

lemma rat_den_one_is_nat_of_lt (q: ‚Ñö) (h‚ÇÅ : q.den = 1) (h‚ÇÇ : 0 < q ) : ‚àÉ n : ‚Ñï, n = q := by
  use q.num.toNat
  apply Rat.ext
  ¬∑ simp_all only [Rat.num_natCast, Int.ofNat_toNat, max_eq_left_iff, Rat.num_nonneg]
    rw [le_iff_lt_or_eq]
    left
    exact h‚ÇÇ
  ¬∑ aesop

lemma rat_den_one_is_nat (q: ‚Ñö) (h‚ÇÅ : q.den = 1) (h‚ÇÇ : 0 ‚â§ q ): ‚àÉ n : ‚Ñï, n = q := by
  use q.num.toNat
  apply Rat.ext
  ¬∑ aesop
  ¬∑ aesop


lemma den_one_of_int_rat (a : ‚Ñ§) : (‚Üëa : ‚Ñö).den = 1 := by exact rfl

-- ‚Üë(k‚ÇÄ * x - k‚ÇÄ).num.toNat * x).den = 1
lemma rat_sub_den_one (q r : ‚Ñö) (hq : q.den = 1) (hr : r.den = 1) :  (q - r).den = 1 := by
  -- establish that q and r can be lowered into the integers.
  obtain ‚ü®q', hqz‚ü© := rat_den_one_is_int q hq
  obtain ‚ü®r', hrz‚ü© := rat_den_one_is_int r hr

  -- establish that integers raised lifted into the rationals have den = 1
  have h‚ÇÅ := den_one_of_int_rat (q' - r')
  have h‚ÇÇ : ‚Üë(q' - r') = q - r := by aesop
  rw [‚Üêh‚ÇÇ]
  exact h‚ÇÅ

lemma rat_mul_den_one (q r : ‚Ñö) (hq : q.den = 1) (hr : r.den = 1) :  (q * r).den = 1 := by
  -- establish that q and r can be lowered into the integers.
  obtain ‚ü®q', hqz‚ü© := rat_den_one_is_int q hq
  obtain ‚ü®r', hrz‚ü© := rat_den_one_is_int r hr

  -- establish that integers lifted into the rationals have den = 1
  have h‚ÇÅ := den_one_of_int_rat (q' * r')

  have h‚ÇÇ : ‚Üë(q' * r') = q * r := by aesop
  rw [‚Üêh‚ÇÇ]
  exact h‚ÇÅ

-- the rationals do not have the least upperbound property.
theorem rats_not_complete : ¬¨ ‚àÉ x, IsLUB E x := by
  by_contra hc
  obtain ‚ü®x, hx‚ü© := hc
  obtain ‚ü®hr‚ÇÅ, hr‚ÇÇ‚ü© := lubp_part_1 x hx
  have hr‚ÇÅ : 1 < x := by nlinarith

  let n := x.den
  let S := {k : ‚Ñï | (k * x).den = 1 ‚àß 0 < k}

  have hn‚ÇÅ : 0 < n := by exact Rat.den_pos x
  have n_is_el : n ‚àà S := by aesop
  have ht : S.Nonempty := by exact nonempty_of_mem n_is_el

  have hle : ‚àÉ k , IsLeast S k := by
    use (sInf S)
    constructor
    ¬∑ apply Nat.sInf_mem ht
    ¬∑ exact (isLeast_csInf ht).right

  obtain ‚ü®k‚ÇÄ, hk‚ü© := hle
  have hkq‚ÇÅ : k‚ÇÄ ‚àà S := by exact mem_of_mem_inter_left hk

  have hk‚ÇÄ : 0 < k‚ÇÄ := by aesop

  let k‚ÇÅ := ‚Üëk‚ÇÄ * x - ‚Üëk‚ÇÄ

  have hkq‚ÇÇ : (k‚ÇÄ * x).den = 1 := by
    obtain ‚ü®hq‚ÇÅ, _‚ü© := hkq‚ÇÅ
    apply hq‚ÇÅ

  have hx‚ÇÉ : x < 2 := by nlinarith

  have hk‚ÇÉ : k‚ÇÅ < k‚ÇÄ :=
    calc k‚ÇÅ
      _= k‚ÇÄ * x - k‚ÇÄ := by rfl
      _= k‚ÇÄ * (x - 1) := by ring
      _< k‚ÇÄ * (2 - 1) := by rel [hx‚ÇÉ]
      _= k‚ÇÄ := by ring

  -- So, k‚ÇÅ ‚àà ‚Ñï and k‚ÇÅ < k‚ÇÄ ‚Üí k‚ÇÅ ‚àâ S because k‚ÇÄ is the least element of S.
  -- need to prove k‚ÇÅ has den = 1.

  have hhk‚ÇÇ : 0 < k‚ÇÅ := by
    unfold k‚ÇÅ
    have : ‚Üëk‚ÇÄ * (x - 1) = ‚Üëk‚ÇÄ * x - ‚Üëk‚ÇÄ := by ring
    rw [‚Üêthis]
    have : 0 < (x - 1) := by nlinarith
    aesop

  have hhk‚ÇÉ : k‚ÇÅ.den = 1 := by
    unfold k‚ÇÅ
    apply rat_sub_den_one
    aesop
    aesop

  obtain ‚ü®j, hj‚ü© := rat_den_one_is_nat_of_lt k‚ÇÅ hhk‚ÇÉ hhk‚ÇÇ

  have hc‚ÇÇ : ¬¨ (j ‚àà S) := by
    obtain ‚ü®hj‚ÇÅ, hj‚ÇÇ‚ü© := hk
    intro hj‚ÇÉ
    have hj‚ÇÑ := @hj‚ÇÇ j
    contrapose hj‚ÇÑ
    push_neg
    constructor
    ¬∑ exact hj‚ÇÉ
    ¬∑ --
      rw [‚Üêhj] at hk‚ÇÉ
      qify
      exact hk‚ÇÉ


  -- But, x*j = k‚ÇÄ*x^2 - x*k‚ÇÄ = 2*k‚ÇÄ - x*k‚ÇÄ = k‚ÇÄ-j ‚àà ‚Ñï ‚Üí k‚ÇÅ ‚àà S
  -- ! j < k‚ÇÄ
  -- ! j ‚àà S
  -- ! k‚ÇÄ is not the least element in S.

  have hc‚ÇÑ : j ‚àà S := by
    have h‚ÇÅ :=
      calc x * j
        _= x * k‚ÇÅ := by aesop
        _= x * (‚Üëk‚ÇÄ * x - ‚Üëk‚ÇÄ) := by rfl
        _= ‚Üëk‚ÇÄ * x ^ 2 - ‚Üëk‚ÇÄ * x := by ring
        _= ‚Üëk‚ÇÄ * 2 - ‚Üëk‚ÇÄ * x := by rw [hr‚ÇÇ]
        _= - (‚Üëk‚ÇÄ * x - ‚Üëk‚ÇÄ * 2) := by ring
        _= - (‚Üëk‚ÇÄ * x - ‚Üëk‚ÇÄ - ‚Üëk‚ÇÄ) := by ring
        _= - (k‚ÇÅ - ‚Üëk‚ÇÄ) := by ring
        _= k‚ÇÄ - ‚Üëk‚ÇÅ := by ring
        _= k‚ÇÄ - j := by aesop

    have h‚ÇÇ : (‚Üëj : ‚Ñö).den = 1 := by aesop
    have h‚ÇÉ : (‚Üëk‚ÇÄ - ‚Üëj : ‚Ñö).den = 1 := by
      apply rat_sub_den_one
      ¬∑ aesop
      ¬∑ aesop

    rw [‚Üêh‚ÇÅ] at h‚ÇÉ

    have h‚ÇÑ : 0 < ‚Üëj := by
      rw [‚Üêhj] at hhk‚ÇÇ
      qify
      exact hhk‚ÇÇ

    unfold S
    constructor
    ¬∑ rw [mul_comm]
      exact h‚ÇÉ
    ¬∑ exact h‚ÇÑ

  contradiction

end q_no_lubp







end Lecture3
